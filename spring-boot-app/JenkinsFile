pipeline {
  agent {
    docker {
      image 'maven:3.9.9-eclipse-temurin-17'
      // ðŸ‘‡ Run as Jenkins user instead of root & mount Maven cache
      args '--user 1000:1000 -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.m2:/root/.m2'
    }
  }

  options {
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
  }

  stages {
    stage('Clean Workspace') {
      steps {
        cleanWs(deleteDirs: true, disableDeferredWipeout: true)
      }
    }

    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/Ravi-Pr4kash/Jenkins-Pipeline.git']]
        ])
        sh 'echo âœ… Code Checkout Passed'
      }
    }

    stage('Build App') {
      steps {
        dir('spring-boot-app') {
          sh 'mvn -B clean package -DskipTests'
          sh 'echo âœ… Maven Build Successful'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('spring-boot-app') {
          script {
            sh 'docker build -t spring-boot-app:latest .'
          }
        }
      }
    }

    stage('Push to DockerHub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
          usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          script {
            sh '''
              echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
              docker tag spring-boot-app:latest $DOCKER_USER/spring-boot-app:latest
              docker push $DOCKER_USER/spring-boot-app:latest
            '''
          }
        }
      }
    }

    stage('Deploy with ArgoCD') {
      steps {
        sh 'echo ðŸš€ Trigger ArgoCD sync here (argocd app sync spring-boot-app)'
      }
    }
  }

  post {
    always {
      cleanWs(deleteDirs: true, disableDeferredWipeout: true) // ðŸ‘ˆ ensures cleanup
    }
  }
}